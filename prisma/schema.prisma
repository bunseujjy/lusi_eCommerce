// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  name           String    @unique
  hashedPassword String?
  image          String?
  public_id      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastLogin      DateTime  @default(now())
  emailVerified  DateTime?
  role           UserRole  @default(USER)

  signature                String?   @unique
  token                    String?   @unique
  passwordResetTokenExpiry DateTime?

  Account Account[]
  Session Session[]
  reviews Review[]
  contact Contact[]
  order   Order[]
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  description String?
  price       Float
  discount    Float
  public_id   String
  images      String
  category    String[]
  inStock     String
  sold        Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]
  order       Order[]
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderID     Int
  userId      String   @db.ObjectId
  productId   String[] @db.ObjectId
  products    Json[]
  category    String[]
  email       String
  name        String
  postcode    String
  address     String
  phoneNumber String
  paid        String   @default("unpaid")

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  message     String
  subject     String
  rating      Float
  like        Float?
  likedBy     String[]
  dislike     Float?
  dislikedBy  String[]
  createdDate DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  productId   String   @db.ObjectId
  rating      Float
  like        Float?
  likedBy     String[]
  dislike     Float?
  dislikedBy  String[]
  comment     String
  createdDate DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}
